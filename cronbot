#!/usr/bin/env perl

use warnings;
use strict;
use Getopt::Long;
use POSIX;
use Pod::Usage;
use Sys::Hostname;
use Digest::MD5 qw(md5_hex);
use Math::BigInt;

my $TMP = "/tmp";

my $rand;
my $allowduplicate = 0;
my $timer          = 0;
my $man            = 0;
my $loadlimit;
my $nonice;
my $touchfile;

my ($logfile, $LOG);
my $nicecmd        = '/usr/bin/nice' if (-f '/usr/bin/nice');

GetOptions ('rand:i'         => \$rand,
            'duplicate|d'    => \$allowduplicate,
            'timer|t:i'      => \$timer,
            'nonice'         => \$nonice,
            'touchfile|tf:s' => \$touchfile,
            'logfile|lf:s'   => \$logfile,
            'loadlimit|ll:s' => \$loadlimit,
            'man'            => \$man,
            
           );

if ($man)          { pod2usage( {-verbose => 2 } ); }
if ($#ARGV == -1 ) { pod2usage( {-verbose => 1 } ); }


# Using specified logfile rather than syslog
if ($logfile)
{
    open $LOG, '>>', $logfile or die("Unable to open logfile $logfile for writing");

} else {
    use Sys::Syslog qw(:standard :macros);
    openlog($ARGV[1], 'nofatal', 'LOG_CRON');
}



# If using touchfile.. make sure we can create it later
if ($touchfile)
{
    # This seems silly.. but if we don't already have a touch file we have
    # to make one to be sure we can make one later for reals. 
    if (not -e $touchfile)
    {
        my $ret = system("/usr/bin/env touch $touchfile");
        if ($ret)
        {
            mylog("ERROR: Unable to write to $touchfile");
            exit 1;
        } else { unlink $touchfile; }

    } elsif (not -w $touchfile)
    { 
        mylog("ERROR: Unable to write to $touchfile");
        exit 1;
    }
}

createPidFile();

mylog("Running: @ARGV");


if (defined($rand) and $rand == 0) { $rand = 30; }
if (defined($rand))
{
    my $rsleep = $rand * 60;
    my $host = md5_hex(hostname);
    my $hexval = Math::BigInt->from_hex('0x'.$host);
    my $sleepval = $hexval % $rsleep;
    sleep($sleepval);
}


if (defined($loadlimit))
{
    my $sleep = 60;    
    while (1)
    {
        my $load = getLoadAvg();
        if ($load <= $loadlimit) { last; }
        else {
            mylog ("Load too high $load sleeping $sleep seconds");
            sleep $sleep;
            if ($sleep >= 3840) { mylog("WARN: Load average too high to run"); exit 1; }
            $sleep = $sleep + $sleep;
        }
    }
}


if (defined($nonice))
{
    undef $nicecmd;
}

# Only run a single instance of whatever this is by default
if (not $allowduplicate)
{
    opendir ( DIR, $TMP ) || die "Error in opening temp dir $TMP\n";
    while( my $filename = readdir(DIR) )
    {
        next if $filename !~ /^cronbot\./;
        next if $filename eq "cronbot.$$";
        
        open my $fp, '<', "$TMP/$filename" or die "Unable to read pid file $filename";
        my @l = <$fp>;
        my $args = "@ARGV";
        chomp $l[0];
        if ($l[0] eq $args)
        {
            # File indicates a duplicate process running.. but is it really?
            my ($junk, $testpid) = split /\./, $filename;
            my $test = `ps -Af |grep $testpid | grep -v grep`;
            if (not $test)
            {
                # Nope... clean up that old file and continue.
                unlink $filename;
                mylog("WARNING: Removed old PID file for non-running process");
            } else {

                mylog("WARNING: Duplicate process running");
                exit 0;
            }
        }
    }
    closedir(DIR);
}


if ( $timer >= 1 )
{
    $timer = $timer * 60;
    eval
    {
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required

        alarm $timer;
        unshift (@ARGV, $nicecmd) if ( $nicecmd);
        my $ret = system(@ARGV);
        exit $ret;
        alarm 0;
    };
    
    if ($@)
    {
        die unless $@ eq "alarm\n"; # propagate unexpected errors
    } else {

        # didn't
        updateTouchfile();

    }

} else {

    # No timer
    unshift (@ARGV, $nicecmd) if ( $nicecmd);
    my $ret = system( @ARGV);
    updateTouchfile();
}



END
{
    unlink "$TMP/cronbot.$$";
    if ($timer >= 1)
    {
        mylog("ERROR: Process timed out and was terminated:  @ARGV");
        kill 9, getpgrp() * -1;
    }
}


sub mylog
{
    my $now = `date -u "+%Y-%m-%d %H:%M:%S UTC"`;
    chomp $now;

    my ($output) = @_;
    if ($logfile)
    {
        print $LOG "$now | $output\n";

    } else {
        my $level = 'LOG_INFO';
        $level = 'LOG_ERR' if ($output =~ /^ERROR/);
        $level = 'LOG_WARNING' if ($output =~ /^WARNING/);
        syslog($level, "$output");
    }
}


sub getLoadAvg
{
    my $line = `uptime |grep average`;
    my $avg = $1 if $line =~ /\s(\d+\.\d+),?\s/;
    return $avg;
}



sub updateTouchfile
{
    if ($touchfile)
    {
        my $ret = system("/usr/bin/env touch $touchfile");
        
        if ($ret)
        {
            mylog("ERROR: Unable to write to $touchfile");
            exit 1;
        }
    }
}

sub createPidFile
{
    open my $fp, '>', "$TMP/cronbot.$$" or die "Unable to create pid file in $TMP";
    print $fp "@ARGV\n";
    close $fp;
}

__END__

=head1 NAME

cronbot - Gain more control over your cron jobs and how they run.

=head1 SYNOPSIS

cronbot <options> [full path to your regular cron job]

   Options:
     --rand xx		Add a max random number of minutes to wait before starting job. Default is 30 minutes
      			if not otherwise specified. 
     --duplicate	Allow this job to run more than once
     --timer xx   	Specify a max execution time. Longer than this and it will be killed hard
     --nonice 		Do not run the job through nice (man nice)
     --touchfile        Update the modtime on this file after the job completes. Useful for freshness checking.
     --logfile          File to log info and error messages (uses syslog by default)
     --loadlimit x.x    Max 1min load load. Over this value the script waits for the load to drop. Max delay about 2 hours.
     --man		Full man page

=head1 USAGE

15 * * * * root /usr/local/bin/cronbot --timer 90 --rand 10 /usr/local/bin/rsync -a /home /mnt/remote/home

This would attempt to run rsync every hour but will not start a duplicate job if it's still running. It will hard kill the job if it's running for 
more than 90 minutes and it will add a random delay between 1 and 10 minutes before starting the job. 



15 * * * * root /usr/local/bin/cronbot --logfile /var/log/cronitem1.log --tf /var/fresh/cronitem1 /usr/local/bin/rsync -a /home /mnt/remote/home

This example logs output to a file rather than syslog and updated the time stamp on /var/fresh/cronitem1 when the job finishes.  These can be useful
for other automation to detect jobs that aren't running as expected. 


=head1 DESCRIPTION

Cronbot is a wrapper script for cron jobs.  Rather than running your job/script directly you run it through cronbot and it will allow a little more control
to help keep things from getting out of hand.  The default behavior is to only allow one instance of your job to run.  This can be changed with the 
--duplicate option. You can also pass in a maximum time of execution for a job or add a random amount time to delay the start of your job. You can
also specify a maximum load value.. if the systm is over this value it will wait with an exponential backoff and keep trying.. up to about 2 hours.
Also by default jobs are run with a default 'nice' value which is usually 10 (man nice). 

Requires Sys::Syslog for logging to syslog or specify a logfile with --logfile <file>

=head1 COPYRIGHT AND LICENSE

Copyright 2013 Jared Watkins

This is released under the GNU General Public License (GPL-2.0)

=head1 AVAILABILITY

Get it at:

L<https://github.com/jimmydigital/cronbot>

or

L<http://jaredwatkins.com/>

=cut